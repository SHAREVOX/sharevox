/* tslint:disable */
/* eslint-disable */
/**
 * SHAREVOX ENGINE
 * SHAREVOXの音声合成エンジンです。
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ModelConfig,
    ModelConfigFromJSON,
    ModelConfigFromJSONTyped,
    ModelConfigToJSON,
    Speaker,
    SpeakerFromJSON,
    SpeakerFromJSONTyped,
    SpeakerToJSON,
    SpeakerInfo,
    SpeakerInfoFromJSON,
    SpeakerInfoFromJSONTyped,
    SpeakerInfoToJSON,
} from './';

/**
 * SVモデルの情報
 * @export
 * @interface SVModelInfo
 */
export interface SVModelInfo {
    /**
     * 
     * @type {string}
     * @memberof SVModelInfo
     */
    uuid: string;
    /**
     * 
     * @type {string}
     * @memberof SVModelInfo
     */
    varianceModel: string;
    /**
     * 
     * @type {string}
     * @memberof SVModelInfo
     */
    embedderModel: string;
    /**
     * 
     * @type {string}
     * @memberof SVModelInfo
     */
    decoderModel: string;
    /**
     * 
     * @type {Array<Speaker>}
     * @memberof SVModelInfo
     */
    metas: Array<Speaker>;
    /**
     * 
     * @type {ModelConfig}
     * @memberof SVModelInfo
     */
    modelConfig: ModelConfig | null;
    /**
     * 
     * @type {{ [key: string]: SpeakerInfo; }}
     * @memberof SVModelInfo
     */
    speakerInfos: { [key: string]: SpeakerInfo; };
}

export function SVModelInfoFromJSON(json: any): SVModelInfo {
    return SVModelInfoFromJSONTyped(json, false);
}

export function SVModelInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SVModelInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'varianceModel': json['variance_model'],
        'embedderModel': json['embedder_model'],
        'decoderModel': json['decoder_model'],
        'metas': ((json['metas'] as Array<any>).map(SpeakerFromJSON)),
        'modelConfig': ModelConfigFromJSON(json['model_config']),
        'speakerInfos': (mapValues(json['speaker_infos'], SpeakerInfoFromJSON)),
    };
}

export function SVModelInfoToJSON(value?: SVModelInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'variance_model': value.varianceModel,
        'embedder_model': value.embedderModel,
        'decoder_model': value.decoderModel,
        'metas': ((value.metas as Array<any>).map(SpeakerToJSON)),
        'model_config': ModelConfigToJSON(value.modelConfig),
        'speaker_infos': (mapValues(value.speakerInfos, SpeakerInfoToJSON)),
    };
}

